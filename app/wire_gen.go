// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"go-zero-box/app/internal/command"
	demo2 "go-zero-box/app/internal/command/demo"
	"go-zero-box/app/internal/config"
	"go-zero-box/app/internal/middleware"
	"go-zero-box/app/internal/model"
	"go-zero-box/app/internal/model/messagemodel"
	"go-zero-box/app/internal/model/usermodel"
	"go-zero-box/app/internal/queue"
	message2 "go-zero-box/app/internal/queue/message"
	"go-zero-box/app/internal/services"
	"go-zero-box/app/internal/services/demo"
	"go-zero-box/app/internal/services/message"
	"go-zero-box/app/internal/svc"
	"go-zero-box/pkg"
	"go-zero-box/pkg/asynqx"
	"go-zero-box/pkg/database"
	"go-zero-box/pkg/redis"
)

// Injectors from wire.go:

func initApp(c *config.Config) *App {
	databaseConfig := c.Database
	databaseDefault := database.NewDefault(databaseConfig)
	userModel := usermodel.NewUserModel(databaseDefault)
	messageModel := messagemodel.NewMessageModel(databaseDefault)
	modelModel := model.NewModel(userModel, messageModel)
	service := demo.NewService(userModel)
	messageService := message.NewService()
	servicesServices := services.NewServices(service, messageService)
	databaseDatabase := database.NewDatabase(databaseDefault)
	redisConfig := c.Redis
	redisDefault := redis.NewDefault(redisConfig)
	redisRedis := redis.NewRedis(redisDefault)
	asynqxConfig := c.Asynqx
	client := asynqx.NewClient(asynqxConfig)
	asynq := asynqx.NewAsynq(client)
	pkgPkg := pkg.NewPkg(databaseDatabase, redisRedis, asynq)
	authMiddleware := middleware.NewAuthMiddleware(c)
	logMiddleware := middleware.NewLogMiddleware(c)
	middlewareMiddleware := middleware.NewMiddleware(authMiddleware, logMiddleware)
	serviceContext := svc.NewServiceContext(c, modelModel, servicesServices, pkgPkg, middlewareMiddleware)
	mailQueue := message2.NewMailQueue(messageService)
	smsQueue := message2.NewSmsQueue(messageService)
	wechatQueue := message2.NewWechatQueue(messageService)
	queueQueue := queue.NewQueue(mailQueue, smsQueue, wechatQueue)
	person := demo2.NewPerson()
	commandCommand := command.NewCommand(person)
	app := NewApp(c, serviceContext, queueQueue, commandCommand, pkgPkg)
	return app
}

// wire.go:

type App struct {
	config  *config.Config
	svcCtx  *svc.ServiceContext
	queue   *queue.Queue
	command *command.Command
	pkg     *pkg.Pkg
}

func NewApp(config2 *config.Config, svcCtx *svc.ServiceContext, queue2 *queue.Queue, command2 *command.Command, pkg2 *pkg.Pkg) *App {
	return &App{config: config2, svcCtx: svcCtx, queue: queue2, command: command2, pkg: pkg2}
}
